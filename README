alon.uzan
209503739

Q1. Here i will give some general details about each class in the UML :
	AsciiOutput-
		An object implementing this interface can output a 2D array of chars 
		in some fashion.
	KeyboardInput-
		Takes an input from the user.
	ConsoleAsciiOutput-
		Output a 2D array of chars to the console.
	HtmlAsciiOutput-
		Output a 2D array of chars to an HTML file viewable in a web browser.
	CharConverter-
		The class converts characters to a binary "image" (2D array of booleans).
	Image-
		A package-private class of the package image.
	ImagePad-
		This class extends the Image class and provides functionality to pad an 
		image to make its dimensions power of two.
	ImageUtils-
		The ImageUtils class provides utility methods for image processing.
	SubImgCharMatcher-
		The SubImgCharMatcher class matches characters based on image 
		brightness.
	AsciiArtAlgorithm-
		The AsciiArtAlgorithm class represents an algorithm for generating 
		ASCII art from an image.
	Shell-
		Shell class represents a shell interface for generating ASCII art from images.
	ExceedBound-
		The ExceedBound class represents an exception thrown when a value 
		exceeds a specified bound.
	IllegalRequest-
		The IllegalRequest class represents an exception thrown when a request is
		illegal or does not conform to expected format.
	FuncWithArgs-
		The FuncWithArgs interface represents a functional interface that defines a
		method with arguments.

Q2. Here i will give some general details abount my choise of using specific data
	structures in my project :

	HashMap<Character, Double[]> - in the SubImgCharMatcher class i used this 
	hash map in order to utilise my overall complexity, both time and space. By 
	using this type of structure, i can store the plain brightness of each character,
	along side of the normalized brightness, so that when we add or remove a
	character that has the minimum or the maximum value of brightness, as it
	effects on the normalized brightnesses of all the other chars, i can calculate
	the new normalized brightnesses without need of calculate the plains 
	brightnesses again. MoreOver, searcing value in this structure takes O(n)
	amortized, which i done quite a lot during my project.

	ArrayList<Map.Entry<Character, Double[]>> - in the Shell class i used this
	Array list in order to sort the hashed chars by their key, i.e. the chars in the
	hash map.

	Map<Integer, double[][]> - in the Image class, i used this hash map in order
	to save a sort of cache for the brightnesses 2D array.That is for when i split
	an image according to some resulution, and then calculate each subImage
	brightness, later on if i asked again to asciiArt the same image with the same
	resolution, i already have the brightnesses array and don't need to calculate
	it again, wich in some cases can be very expensive to do. 

Q3. Here i will give some general information about how i handeled exceptions
	in my project :
	In general, i implement a hash map that is mapping request to function calls,
	so in the run function i simply call the function that is stored in the hash map
	for the current request input from the user. By that, i used the "try-cath" 
	mechanizm in the run function, and if there was an exception i catch it and
	prints the error massege from the exception wich was thrown from each one
	of the functions in the hash map. MoreOver, as there were some different 
	type of exceptions, i implement two more exception classes "ExceedBound"
	and "IllegalRequest" as described in Q1.

Q4. Here are all the changes that i make for the API of the SubImgCharMatcher
	class :
	As i implement the charset via hash map as described in Q2, i decided to use
	all its properties directly from the Shell class. In order to print all the current
	chars to the user using the commend "chars" from the run function in the 
	Shell class, i added a getter function to the chars hash map. With that, i
	acchieved the ability of reading the chars and not enabled any edditing 
	from outside the class, so this change of the API is a safe one. And that
	is the only change that i made.

Q5. Here are all the changes that i make for the API of the classes in my project :
	The only chamge that i made (except for the one that i just described in Q4) 
	is in the Image class. I added a hash map as described in Q2. so in order to
	utilize it i added getter and setter for this hash map. As described in Q2,
	this changes are crusial to the complexity of my project.